{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Guide de d\u00e9veloppement web","text":"<p>Ce guide est destin\u00e9 \u00e0 vous fournir les principales informations pour le d\u00e9veloppement d'une page web basique. </p> <p>L'utilisation d'un moteur de recherche est recommand\u00e9e pour obtenir des informations plus d\u00e9taill\u00e9es.</p> <p>Des sites web comme W3Schools et MDN Web Docs sont \u00e9galement recommand\u00e9s pour obtenir des informations sur les technologies web.</p>"},{"location":"#w3schools","title":"W3Schools","text":"<p>W3Schools est un site web qui fournit des tutoriels sur le d\u00e9veloppement web. Il est tr\u00e8s utile pour les d\u00e9butants car il fournit des exemples de code et des explications simples.</p> <p>Il est recommand\u00e9 de consulter W3Schools pour obtenir des informations sur les balises HTML, les propri\u00e9t\u00e9s CSS et les fonctions JavaScript.</p> <p>Il est accessible \u00e0 l'adresse suivante : W3Schools</p>"},{"location":"#mdn-web-docs","title":"MDN Web Docs","text":"<p>MDN Web Docs est un site web qui fournit des informations d\u00e9taill\u00e9es sur les technologies web. Il est tr\u00e8s utile pour les d\u00e9veloppeurs exp\u00e9riment\u00e9s car il fournit des informations sur les derni\u00e8res sp\u00e9cifications et les bonnes pratiques.</p> <p>Il est recommand\u00e9 de consulter MDN Web Docs pour obtenir des informations sur les API Web, les sp\u00e9cifications HTML, CSS et JavaScript.</p> <p>Il est accessible \u00e0 l'adresse suivante : MDN Web Docs</p>"},{"location":"css/","title":"Cascade Style Sheets","text":"<p>Le css est un langage de style qui permet de mettre en forme des pages web. Il est utilis\u00e9 pour d\u00e9finir les couleurs, les polices, les positions, les tailles, les diff\u00e9rents effets, etc.</p>"},{"location":"css/#syntaxe","title":"Syntaxe","text":"<p>Le css est compos\u00e9 de s\u00e9lecteurs et de d\u00e9clarations. Les s\u00e9lecteurs permettent de cibler les \u00e9l\u00e9ments html et les d\u00e9clarations permettent de d\u00e9finir les propri\u00e9t\u00e9s des \u00e9l\u00e9ments cibl\u00e9s.</p> <pre><code>/* S\u00e9lecteur */\nh1 {\n  /* D\u00e9claration */\n  color: red;\n}\n</code></pre>"},{"location":"css/#selecteurs","title":"S\u00e9lecteurs","text":"<p>Il existe plusieurs types de s\u00e9lecteurs :</p> <ul> <li>Les s\u00e9lecteurs de type</li> <li>Les s\u00e9lecteurs de classe</li> <li>Les s\u00e9lecteurs d'id</li> <li>Les s\u00e9lecteurs d'attributs</li> <li>Les s\u00e9lecteurs de pseudo-classes</li> <li>Les s\u00e9lecteurs de pseudo-\u00e9l\u00e9ments</li> </ul> <p>S\u00e9lecteurs de type</p> <p>Les s\u00e9lecteurs de type permettent de cibler les \u00e9l\u00e9ments html.</p> <pre><code>/* Cible tous les \u00e9l\u00e9ments h1 */\nh1 {\n  color: red;\n}\n</code></pre> <p>Ici, tous les \u00e9l\u00e9ments h1 auront une couleur rouge.</p> <p>S\u00e9lecteurs de classe</p> <p>Les s\u00e9lecteurs de classe permettent de cibler les \u00e9l\u00e9ments html qui ont une classe.</p> <pre><code>/* Cible tous les \u00e9l\u00e9ments qui ont la classe \"title\" */\n.title {\n  color: red;\n}\n</code></pre> <p>Ici, tous les \u00e9l\u00e9ments qui ont la classe \"title\" auront une couleur rouge. La classe est d\u00e9finie dans le fichier html.</p> <pre><code>&lt;h1 class=\"title\"&gt;Titre&lt;/h1&gt;\n</code></pre> <p>S\u00e9lecteurs d'id</p> <p>Les s\u00e9lecteurs d'id permettent de cibler les \u00e9l\u00e9ments html qui ont un id.</p> <pre><code>/* Cible l'\u00e9l\u00e9ment qui a l'id \"title\" */\n#title {\n  color: red;\n}\n</code></pre> <p>L'id est d\u00e9fini dans le fichier html.</p> <pre><code>&lt;h1 id=\"title\"&gt;Titre&lt;/h1&gt;\n</code></pre> <p>S\u00e9lecteurs d'attributs</p> <p>Les s\u00e9lecteurs d'attributs permettent de cibler les \u00e9l\u00e9ments html qui ont un attribut.</p> <pre><code>/* Cible l'\u00e9l\u00e9ment qui a l'attribut \"href\" */\n[href] {\n  color: red;\n}\n</code></pre> <p>L'attribut est d\u00e9fini dans le fichier html.</p> <pre><code>&lt;a href=\"https://google.com\"&gt;Lien&lt;/a&gt;\n</code></pre> <p>S\u00e9lecteurs de pseudo-classes</p> <p>Les s\u00e9lecteurs de pseudo-classes permettent de cibler les \u00e9l\u00e9ments html qui ont un \u00e9tat particulier.</p> <pre><code>/* Cible l'\u00e9l\u00e9ment qui est survol\u00e9 */\na:hover {\n  color: red;\n}\n</code></pre> <p>Les \u00e9tats possibles sont : hover, active, focus, etc... Voir la liste des \u00e9tats possibles ici.</p> <p>Ici, l'\u00e9l\u00e9ment a aura une couleur rouge lorsqu'il sera survol\u00e9.</p> <p>S\u00e9lecteurs de pseudo-\u00e9l\u00e9ments</p> <p>Les s\u00e9lecteurs de pseudo-\u00e9l\u00e9ments permettent de cibler des parties d'\u00e9l\u00e9ments html.</p> <pre><code>/* Cible la premi\u00e8re ligne de l'\u00e9l\u00e9ment */\np::first-line {\n  color: red;\n}\n</code></pre> <p>Les parties possibles sont : first-line, first-letter, etc... Voir la liste des parties possibles ici.</p> <p>Ici, la premi\u00e8re ligne de l'\u00e9l\u00e9ment p aura une couleur rouge.</p>"},{"location":"css/#declarations","title":"D\u00e9clarations","text":"<p>Il existe plusieurs fa\u00e7ons d'ajouter du css \u00e0 une page web. Selon la m\u00e9thode utilis\u00e9e, le css sera plus ou moins prioritaire.</p> <p>L'ordre de priorit\u00e9 est le suivant :</p> <ol> <li>Les styles inline (attribut style)</li> <li>Les styles internes (balise style)</li> <li>Les styles externes (fichier css)</li> </ol> <p>En fonction du besoin, il est possible d'utiliser une m\u00e9thode plut\u00f4t qu'une autre. </p> <p>L'avantage d'utiliser un fichier css est que le code est s\u00e9par\u00e9 du code html. Cela permet de mieux organiser son code et de le rendre plus lisible. Il est \u00e9galement possible de r\u00e9utiliser le m\u00eame fichier css pour plusieurs pages web. Le fichier css sera alors li\u00e9 \u00e0 chaque page web. Cela permet de ne pas avoir \u00e0 r\u00e9\u00e9crire le m\u00eame code css pour chaque page web. De plus le fichier css sera mis en cache par le navigateur. Cela permettra d'am\u00e9liorer les performances du site web. </p> <p>Il est possible d'utiliser le navigateur pour tester du css. Il suffit d'ouvrir la console du navigateur et de cliquer sur l'onglet \"Elements\". Il est ensuite possible de modifier le css directement dans le navigateur. Cela permet de tester rapidement du css sans avoir \u00e0 modifier le code html ou le code css.</p>"},{"location":"css/#dans-le-fichier-html","title":"Dans le fichier html","text":"<p>Il est possible d'ajouter du css directement dans le fichier html.</p> <pre><code>&lt;style&gt;\n  h1 {\n    color: red;\n  }\n&lt;/style&gt;\n\n&lt;h1&gt;Titre&lt;/h1&gt;\n</code></pre>"},{"location":"css/#dans-un-fichier-css","title":"Dans un fichier css","text":"<p>Il est possible d'ajouter du css dans un fichier css.</p> <pre><code>h1 {\n  color: red;\n}\n</code></pre> <p>Il faut ensuite lier le fichier css au fichier html.</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n</code></pre>"},{"location":"css/#dans-un-attribut-style","title":"Dans un attribut style","text":"<p>Il est possible d'ajouter du css dans un attribut style.</p> <pre><code>&lt;h1 style=\"color: red;\"&gt;Titre&lt;/h1&gt;\n</code></pre>"},{"location":"css/#couleurs","title":"Couleurs","text":"<p>Il existe plusieurs fa\u00e7ons de d\u00e9finir une couleur en css.</p>"},{"location":"css/#couleurs-nommees","title":"Couleurs nomm\u00e9es","text":"<p>Permet de d\u00e9finir simplement une couleur, mais il n'y a qu'un nombre limit\u00e9 de couleurs disponibles.</p> <pre><code>h1 {\n  color: red;\n}\n</code></pre>"},{"location":"css/#notations-de-couleurs","title":"Notations de couleurs","text":"<p>La notation de couleur permet de d\u00e9finir une couleur en fonction de diff\u00e9rentes valeurs. Il existe plusieurs notations de couleurs : hexad\u00e9cimale, rgb, hsl. Cela permet de d\u00e9finir une couleur de mani\u00e8re plus pr\u00e9cise.</p> <p>Couleurs hexad\u00e9cimales</p> <pre><code>h1 {\n  color: #ff0000;\n}\n</code></pre> <p>Couleurs rgb</p> <pre><code>h1 {\n  color: rgb(255, 0, 0);\n}\n</code></pre> <p>Couleurs hsl</p> <pre><code>h1 {\n  color: hsl(0, 100%, 50%);\n}\n</code></pre>"},{"location":"css/#unites","title":"Unit\u00e9s","text":"<p>Il existe plusieurs unit\u00e9s en css. Relative ou absolue, chaque unit\u00e9 a ses avantages et ses inconv\u00e9nients.</p> <p>Les unit\u00e9s relatives sont dynamiques. Elles sont relatives \u00e0 un autre \u00e9l\u00e9ment. Elles permettent de cr\u00e9er des interfaces fluides et responsives. Elles sont donc \u00e0 privil\u00e9gier. Les types d'unit\u00e9s relatives sont : em, rem, %, vw, vh, vmin, vmax.</p> <p>Les unit\u00e9s absolues sont fixes. Les types d'unit\u00e9s absolues sont : px, cm, in, pt.</p>"},{"location":"css/#media-queries","title":"Media queries","text":"<p>Les media queries permettent de d\u00e9finir des r\u00e8gles css en fonction de la taille de l'\u00e9cran. Cela permet de cr\u00e9er des interfaces fluides et responsives.</p> <pre><code>/* D\u00e9finit la couleur du titre en fonction de la taille de l'\u00e9cran */\n@media (max-width: 600px) {\n  h1 {\n    color: red;\n  }\n}\n</code></pre>"},{"location":"css/#frameworks","title":"Frameworks","text":"<p>Les frameworks permettent de cr\u00e9er des interfaces fluides et responsives. Ils sont compos\u00e9s de composants qui peuvent \u00eatre r\u00e9utilis\u00e9s. Ils permettent de gagner du temps. Ils permettent \u00e9galement de cr\u00e9er des interfaces fluides et responsives en r\u00e9duisant le nombre de lignes de code css.</p> <p>Il existe plusieurs frameworks. Les plus connus sont : Bootstrap, Tailwind, Material UI, etc. </p> <p>C'est par exemple le framework Material UI qui est utilis\u00e9 pour ce guide.</p> <p>Material UI est un framework propos\u00e9 par Google. Il est bas\u00e9 sur le Material Design. </p>"},{"location":"exercices/","title":"Exercices","text":""},{"location":"exercices/#fichiers-de-base-pour-les-exercices","title":"Fichiers de base pour les exercices","text":"<ul> <li>index.html</li> <li>style.css</li> </ul>"},{"location":"exercices/#exercices-js","title":"Exercices Js","text":""},{"location":"exercices/#ajouter-du-texte-a-lelement-h1","title":"Ajouter du texte \u00e0 l'\u00e9l\u00e9ment h1","text":"<p>Afin de r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment h1, on peut utiliser la m\u00e9thode <code>document.querySelector</code> qui permet de r\u00e9cup\u00e9rer un \u00e9l\u00e9ment en fonction de son s\u00e9lecteur CSS. Dans notre cas, on peut utiliser le s\u00e9lecteur <code>h1</code> pour r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment h1.</p> <p>Il est aussi possible d'utiliser la m\u00e9thode <code>document.getElementById</code> qui permet de r\u00e9cup\u00e9rer un \u00e9l\u00e9ment en fonction de son id. Dans notre cas, on peut utiliser l'id <code>title</code> pour r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment h1. La m\u00e9thode <code>document.getElementById</code> est plus rapide que la m\u00e9thode <code>document.querySelector</code>, car elle ne parcourt pas tout le document. On peut aussi utiliser la m\u00e9thode <code>document.querySelector</code> avec le s\u00e9lecteur <code>#title</code> pour r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment h1.</p> <p>Une fois l'\u00e9l\u00e9ment r\u00e9cup\u00e9r\u00e9, on peut modifier son contenu avec la propri\u00e9t\u00e9 <code>innerText</code>. Le signe <code>+=</code> permet d'ajouter du texte \u00e0 la fin du contenu de l'\u00e9l\u00e9ment.</p> JSHTML <pre><code>document.querySelector(\"h1\").innerText += \" from JS\";\n// ou\ndocument.querySelector('#title').innerText += ' from JS';\n// ou\ndocument.getElementById('title').innerText += ' from JS';\n</code></pre> <pre><code>&lt;h1 id='title'&gt;Hello world \ud83e\udd16&lt;/h1&gt;\n</code></pre>"},{"location":"exercices/#changer-la-couleur-de-lelement-h1","title":"Changer la couleur de l'\u00e9l\u00e9ment h1","text":"<p>De la m\u00eame mani\u00e8re que pour ajouter du texte \u00e0 l'\u00e9l\u00e9ment h1, on peut utiliser la propri\u00e9t\u00e9 <code>style.color</code> pour changer la couleur de l'\u00e9l\u00e9ment h1. On a acc\u00e8s \u00e0 toutes les propri\u00e9t\u00e9s CSS de l'\u00e9l\u00e9ment via la propri\u00e9t\u00e9 <code>style</code>. </p> <p>On peut donc modifier toutes les propri\u00e9t\u00e9s CSS de l'\u00e9l\u00e9ment. Il suffit de remplacer le tiret <code>-</code> par la majuscule suivante. Par exemple, la propri\u00e9t\u00e9 <code>background-color</code> devient <code>backgroundColor</code>. </p> JS <pre><code>document.getElementById('title').style.color = 'red';\n</code></pre>"},{"location":"exercices/#ajouter-un-element-h2-juste-apres-lelement-h1","title":"Ajouter un \u00e9l\u00e9ment h2 juste apr\u00e8s l'\u00e9l\u00e9ment h1","text":"<p>Pour cr\u00e9er un \u00e9l\u00e9ment, on peut utiliser la m\u00e9thode <code>document.createElement</code> qui permet de cr\u00e9er un \u00e9l\u00e9ment en fonction de son nom. Dans notre cas, on peut utiliser le nom <code>h2</code> pour cr\u00e9er un \u00e9l\u00e9ment h2. On a ensuite acc\u00e8s \u00e0 toutes les propri\u00e9t\u00e9s de l'\u00e9l\u00e9ment via la variable <code>h2</code>.</p> <p>Pour ajouter un \u00e9l\u00e9ment \u00e0 la suite d'un autre \u00e9l\u00e9ment, on peut utiliser la m\u00e9thode <code>after</code> qui permet d'ajouter un \u00e9l\u00e9ment apr\u00e8s un autre \u00e9l\u00e9ment. Dans notre cas, on peut utiliser la m\u00e9thode <code>after</code> sur l'\u00e9l\u00e9ment h1 pour ajouter l'\u00e9l\u00e9ment h2 apr\u00e8s l'\u00e9l\u00e9ment h1.</p> JS <pre><code>// Add a h2 element under the h1\nconst h2 = document.createElement(\"h2\");\nh2.id = \"sous-titre\";\nh2.innerText = \"Welcome to the javascript world\";\ndocument.querySelector(\"h1\").after(h2);\n</code></pre>"},{"location":"exercices/#ajouter-un-element-h3-avec-lheure-actuelle-juste-apres-lelement-h2","title":"Ajouter un \u00e9l\u00e9ment h3 avec l'heure actuelle juste apr\u00e9s l'\u00e9l\u00e9ment h2","text":"<p>L'objet Date permet de r\u00e9cup\u00e9rer la date et l'heure actuelle. La m\u00e9thode <code>toLocaleTimeString</code> permet de r\u00e9cup\u00e9rer l'heure au format local.</p> <p>Pour mettre \u00e0 jour l'heure toutes les secondes, on peut utiliser la m\u00e9thode <code>setInterval</code> qui permet d'ex\u00e9cuter une fonction toutes les secondes. Dans notre cas, on peut utiliser la m\u00e9thode <code>setInterval</code> pour mettre \u00e0 jour le contenu de l'\u00e9l\u00e9ment h3 toutes les secondes. </p> <p>Le premier param\u00e8tre de la m\u00e9thode <code>setInterval</code> est une fonction qui sera ex\u00e9cut\u00e9e toutes les secondes. Le deuxi\u00e8me param\u00e8tre est le nombre de millisecondes entre chaque ex\u00e9cution de la fonction.</p> JS <pre><code>// Add a h3 element with the current time just after the h2\nconst h3 = document.createElement(\"h3\");\nh3.innerText = new Date().toLocaleTimeString();\ndocument.querySelector(\"#sous-titre\").after(h3);\n\n// Change the time every second\nsetInterval(() =&gt; {\n    document.querySelector(\"h3\").innerText = new Date().toLocaleTimeString();\n}, 1000);\n</code></pre>"},{"location":"exercices/#supprimer-le-premier-element-de-la-liste-et-en-ajouter-un-nouveau-a-la-fin","title":"Supprimer le premier \u00e9l\u00e9ment de la liste et en ajouter un nouveau \u00e0 la fin","text":"<p>La balise ul contient deux balises li. Pour supprimer le premier \u00e9l\u00e9ment de la liste, on peut utiliser la m\u00e9thode <code>remove</code> sur le premier \u00e9l\u00e9ment de la liste. Pour ajouter un \u00e9l\u00e9ment \u00e0 la fin de la liste, on peut utiliser la m\u00e9thode <code>append</code> sur la liste.</p> JSHTML <pre><code>// Remove the first element of the list and add a new one at the end\nconst list = document.querySelector(\"ul\");\nlist.firstElementChild.remove();\nconst newLi = document.createElement(\"li\");\nnewLi.innerText = \"Item 3\";\nlist.append(newLi);\n</code></pre> <pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"exercices/#changer-la-couleur-de-lelement-caption-du-tableau-lorsque-la-souris-passe-dessus","title":"Changer la couleur de l'\u00e9l\u00e9ment caption du tableau lorsque la souris passe dessus","text":"<p>Il est possible d'ajouter des \u00e9couteurs d'\u00e9v\u00e9nements sur les \u00e9l\u00e9ments du DOM. Dans notre cas, on peut ajouter un \u00e9couteur d'\u00e9v\u00e9nement sur l'\u00e9l\u00e9ment caption du tableau pour d\u00e9tecter lorsque la souris passe dessus, et changer la couleur de l'\u00e9l\u00e9ment caption.</p> <p>De la m\u00eame mani\u00e8re, on peut ajouter un \u00e9couteur d'\u00e9v\u00e9nement pour d\u00e9tecter lorsque la souris sort de l'\u00e9l\u00e9ment caption, et changer la couleur de l'\u00e9l\u00e9ment caption.</p> JS <pre><code>const caption = document.querySelector(\"caption\");\n// Change the color of the caption element when the mouse is over it\ncaption.addEventListener(\"mouseover\", () =&gt; {\n    caption.style.color = \"red\";\n});\n\n// Change the color of the caption element when the mouse is out of it\ncaption.addEventListener(\"mouseout\", () =&gt; {\n    caption.style.color = \"black\";\n});\n</code></pre>"},{"location":"exercices/#ajouter-des-boutons-pour-faire-bouger-limage-et-le-tableau","title":"Ajouter des boutons pour faire bouger l'image et le tableau","text":"<p>Afin de faire bouger l'image et le tableau, on peut ajouter des classes CSS \u00e0 un \u00e9l\u00e9ment. Pour cela, on peut utiliser la m\u00e9thode <code>classList.add</code> qui permet d'ajouter une classe \u00e0 un \u00e9l\u00e9ment, et la m\u00e9thode <code>classList.remove</code> qui permet de supprimer une classe d'un \u00e9l\u00e9ment.</p> <p>Le comportement \u00e9tant le m\u00eame quelque soit l'\u00e9l\u00e9ment, on peut cr\u00e9er une fonction qui permet de faire bouger un \u00e9l\u00e9ment, et une fonction qui permet d'arr\u00eater de faire bouger un \u00e9l\u00e9ment. Il suffit de passer l'\u00e9l\u00e9ment en param\u00e8tre de la fonction.</p> <p>On ajoute ensuite des \u00e9couteurs d'\u00e9v\u00e9nements sur les boutons pour faire bouger l'image et le tableau.</p> JSCSS <pre><code>/**\n * Shake an element\n * @param {*} element \n */\nconst shake = (element) =&gt; {\n    // only shake if the element is not already shaking\n    if (!element.classList.contains(\"shake\")) {\n        console.log(\"Shake the element\", element);\n        element.classList.add(\"shake\");\n    }\n}\n\n// Unshake an element\nconst unshake = (element) =&gt; {\n    // only unshake if the element is shaking\n    if (element.classList.contains(\"shake\")) {\n        console.log(\"Unshake the element\", element);\n        element.classList.remove(\"shake\");\n    }\n}\n\n// add a button to shake the image after the image\nconst buttonShakeImage = document.createElement(\"button\");\nbuttonShakeImage.innerText = \"Shake the image\";\ndocument.querySelector(\"img\").after(buttonShakeImage);\nbuttonShakeImage.addEventListener(\"click\", () =&gt; {\n    shake(document.querySelector(\"img\"));\n});\n\n// add a button to remove the shake class after the new button\nconst buttonUnShakeImage = document.createElement(\"button\");\nbuttonUnShakeImage.innerText = \"Stop shaking the image\";\nbuttonShakeImage.after(buttonUnShakeImage);\nbuttonUnShakeImage.addEventListener(\"click\", () =&gt; {\n    unshake(document.querySelector(\"img\"));\n});\n\n// add a button to shake the table\nconst buttonShakeTable = document.createElement(\"button\");\nbuttonShakeTable.innerText = \"Shake the table\";\ndocument.querySelector(\"table\").after(buttonShakeTable);\nbuttonShakeTable.addEventListener(\"click\", () =&gt; {\n    shake(document.querySelector(\"table\"));\n});\n\n// add a button to remove the shake class\nconst buttonUnshakeTable = document.createElement(\"button\");\nbuttonUnshakeTable.innerText = \"Stop shaking the table\";\nbuttonShakeTable.after(buttonUnshakeTable);\nbuttonUnshakeTable.addEventListener(\"click\", () =&gt; {\n    unshake(document.querySelector(\"table\"));\n});\n</code></pre> <pre><code>.shake {\n    animation: shake 0.5s;\n}\n\n@keyframes shake {\n    0% {\n        transform: translate(0, 0);\n    }\n\n    25% {\n        transform: translate(5px, 5px);\n    }\n\n    50% {\n        transform: translate(0, 0);\n    }\n\n    75% {\n        transform: translate(-5px, -5px);\n    }\n\n    100% {\n        transform: translate(0, 0);\n    }\n}\n</code></pre>"},{"location":"exercices/#recuperer-des-donnees-depuis-un-serveur-et-les-afficher-dans-le-tableau","title":"R\u00e9cup\u00e9rer des donn\u00e9es depuis un serveur et les afficher dans le tableau","text":"<p>Pour r\u00e9cup\u00e9rer des donn\u00e9es depuis un serveur, on peut utiliser la m\u00e9thode <code>fetch</code> qui permet de faire une requ\u00eate HTTP. La m\u00e9thode <code>fetch</code> renvoie une promesse qui contient la r\u00e9ponse du serveur. </p> <p>Une fois la r\u00e9ponse r\u00e9cup\u00e9r\u00e9e, on peut v\u00e9rifier si la r\u00e9ponse est valide. Si la r\u00e9ponse n'est pas valide, on peut afficher un message d'erreur. Si la r\u00e9ponse est valide, on peut r\u00e9cup\u00e9rer les donn\u00e9es de la r\u00e9ponse avec la m\u00e9thode <code>json</code> qui renvoie une promesse qui contient les donn\u00e9es de la r\u00e9ponse.</p> <p>Dans le cas o\u00f9 la promesse est rejet\u00e9e, on peut afficher un message d'erreur, dans cet exemple on affiche le message d'erreur dans le tableau.</p> <p>Les donn\u00e9es r\u00e9cup\u00e9r\u00e9es \u00e9tant une liste d'utilisateurs, on peut ajouter une ligne dans le tableau pour chaque utilisateur. Pour cela, on peut utiliser la m\u00e9thode <code>forEach</code> qui permet d'ex\u00e9cuter une fonction pour chaque \u00e9l\u00e9ment d'un tableau. Dans notre cas, on peut utiliser la m\u00e9thode <code>forEach</code> pour ajouter une ligne dans le tableau pour chaque utilisateur.</p> JS <pre><code>// fetch the data from the server\nfetch(\"https://jsonplaceholder.typicode.com/users\").then((response) =&gt; {\n    console.log(\"Response\", response);\n\n    if(!response.ok) {\n        if(response.status === 404)\n            throw new Error(\"The server responded with a 404 error\");\n        else\n            throw new Error(\"The server responded with an error\");\n\n    }else {\n        return response.json();\n    }\n}).then((users) =&gt; {\n    console.log(\"Users\", users);\n    // add a new row for each user\n    users.forEach((user) =&gt; {\n        const tr = document.createElement(\"tr\");\n        const td1 = document.createElement(\"td\");\n        td1.innerText = user.name;\n        const td2 = document.createElement(\"td\");\n        td2.innerText = user.username;\n        const td3 = document.createElement(\"td\");\n        td3.innerHTML = '&lt;a href=\"mailto:' + user.email + '\"&gt;' + user.email + '&lt;/a&gt;';\n        // td3.innerHTML = `&lt;a href=\"mailto:${user.email}\"&gt;${user.email}&lt;/a&gt;`;\n        tr.appendChild(td1);\n        tr.appendChild(td2);\n        tr.appendChild(td3);\n        document.querySelector(\"tbody\").appendChild(tr);\n    });\n}).catch((error) =&gt; {\n    console.log(\"Error\", error);\n    // add a row with error message\n    const tr = document.createElement(\"tr\");\n    const td = document.createElement(\"td\");\n    td.innerText = error.message;\n    tr.appendChild(td);\n    document.querySelector(\"tbody\").appendChild(tr);\n\n});\n</code></pre>"},{"location":"exercices/#fichiers-complets","title":"Fichiers complets","text":"<ul> <li>index.html</li> <li>style.css</li> <li>script.js</li> </ul>"},{"location":"html/","title":"HTML","text":"<p>Le HTML (HyperText Markup Language) est un langage de balisage. Il permet de structurer et de mettre en forme le contenu d'une page web. </p>"},{"location":"html/#structure-dune-page-web","title":"Structure d'une page web","text":"<p>La structure minimale d'une page web est compos\u00e9e de 3 balises et d'un doctype:</p> <ul> <li><code>&lt;!DOCTYPE html&gt;</code> : d\u00e9finit le type de document comme \u00e9tant un document HTML.</li> <li><code>&lt;html&gt;</code> : d\u00e9finit le document comme \u00e9tant un document HTML.</li> <li><code>&lt;head&gt;</code> : d\u00e9finit un ensemble d'informations sur le document.</li> <li><code>&lt;body&gt;</code> : d\u00e9finit le corps du document.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Titre&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Titre&lt;/h1&gt;\n    &lt;p&gt;Paragraphe&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/#balises","title":"Balises","text":"<p>Une balise est un \u00e9l\u00e9ment qui permet de structurer et de mettre en forme le contenu d'une page web. Elle est compos\u00e9e d'un nom et de deux chevrons. Le HTML n'est pas case sensitive. Cela signifie que les balises peuvent \u00eatre \u00e9crites en majuscules ou en minuscules. Toutefois pour une meilleure lisibilit\u00e9 il est pr\u00e9f\u00e9rable de respecter une convention de nommage. Par exemple, les balises peuvent \u00eatre \u00e9crites en minuscules.</p> <pre><code>&lt;balise&gt;&lt;/balise&gt;\n&lt;Balise&gt;&lt;/Balise&gt;\n&lt;BALISE&gt;&lt;/BALISE&gt;\n&lt;BALISE&gt;&lt;/balise&gt;\n</code></pre> <p>Une balise peut \u00eatre :</p> <ul> <li>une balise ouvrante : <code>&lt;balise&gt;</code></li> <li>une balise fermante : <code>&lt;/balise&gt;</code></li> <li>une balise auto-fermante : <code>&lt;balise /&gt;</code></li> </ul> <p>Une balise peut contenir :</p> <ul> <li>du texte</li> <li>d'autres balises</li> </ul> <pre><code>&lt;p&gt;Paragraphe 1&lt;/p&gt;\n&lt;div&gt;\n  &lt;p&gt;\n    Paragraphe 2\n    &lt;span&gt;Span&lt;/span&gt;\n    &lt;br/&gt; &lt;!-- Saut de ligne --&gt;\n  &lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Ici la balise <code>&lt;p&gt;</code> est une balise ouvrante. La balise <code>&lt;/p&gt;</code> est une balise fermante. La balise <code>&lt;br/&gt;</code> est une balise auto-fermante. La balise <code>&lt;span&gt;</code> est une balise contenue dans la balise <code>&lt;p&gt;</code>. La balise <code>&lt;p&gt;</code> est une balise contenue dans la balise <code>&lt;div&gt;</code>.</p> <p>Un commentaire permet d'ajouter un texte qui ne sera pas interpr\u00e9t\u00e9 par le navigateur. Il est compos\u00e9 de <code>&lt;!--</code> et de <code>--&gt;</code>. Ainsi, on peut ajouter des commentaires dans le code HTML pour le rendre plus lisible. Attention toutefois, ces commentaires seront visibles dans le code source de la page web. Il ne faut donc pas y ajouter d'informations sensibles.</p>"},{"location":"html/#attributs","title":"Attributs","text":"<p>Un attribut est un \u00e9l\u00e9ment qui permet de modifier le comportement ou l'apparence d'une balise. Il est compos\u00e9 d'un nom et d'une valeur.</p> <pre><code>&lt;balise attribut=\"valeur\"&gt;&lt;/balise&gt;\n</code></pre> <p>Par exemple la balise <code>&lt;a&gt;</code> permet de cr\u00e9er un lien hypertexte. Elle poss\u00e8de un attribut <code>href</code> qui permet de d\u00e9finir l'URL de destination du lien.</p> <pre><code>&lt;a href=\"https://google.com\"&gt;Lien vers Google&lt;/a&gt;\n</code></pre> <p>Certains attributs sont obligatoires. Par exemple, l'attribut <code>href</code> est obligatoire pour la balise <code>&lt;a&gt;</code>. D'autres attributs sont optionnels. Par exemple, l'attribut <code>alt</code> est optionnel pour la balise <code>&lt;img&gt;</code>.</p> <pre><code>&lt;img src=\"image.jpg\" alt=\"Image\"&gt;\n</code></pre> <p>Certains attributs sont bool\u00e9ens. Cela signifie qu'ils n'ont pas de valeur. Ils sont utilis\u00e9s pour activer ou d\u00e9sactiver une fonctionnalit\u00e9. Par exemple, l'attribut <code>disabled</code> permet de d\u00e9sactiver un \u00e9l\u00e9ment. L'attribut <code>checked</code> permet de cocher une case \u00e0 cocher.</p> <pre><code>&lt;input type=\"text\" disabled&gt;\n&lt;input type=\"checkbox\" checked&gt;\n</code></pre>"},{"location":"html/#attributs-daccessibilite","title":"Attributs d'accessibilit\u00e9","text":"<ul> <li><code>alt</code> : d\u00e9finit un texte alternatif pour une image.</li> <li><code>tabindex</code> : d\u00e9finit l'ordre de tabulation.</li> <li><code>aria-*</code> : d\u00e9finit un attribut ARIA.</li> <li>role : d\u00e9finit le r\u00f4le d'un \u00e9l\u00e9ment.</li> </ul> <p>ARIA (Accessible Rich Internet Applications) est un ensemble d'attributs qui permettent d'am\u00e9liorer l'accessibilit\u00e9 d'une page web. Ils permettent de d\u00e9crire le contenu d'une page web. Ils sont utilis\u00e9s par les technologies d'assistance comme les lecteurs d'\u00e9cran (pour les personnes ayant une d\u00e9ficience visuelle par exemple). Ils permettent \u00e9galement d'am\u00e9liorer le r\u00e9f\u00e9rencement d'une page web.</p> <p>De la m\u00eame fa\u00e7on le <code>r\u00f4le</code> d'un \u00e9l\u00e9ment permet lui aussi d'am\u00e9liorer l'accessibilit\u00e9 d'une page web. Il permet de d\u00e9crire le r\u00f4le d'un \u00e9l\u00e9ment (bouton, lien, liste, etc...).</p> <pre><code>```html\n&lt;img src=\"image.jpg\" alt=\"Image\"&gt;\n&lt;input type=\"text\" tabindex=\"1\"&gt;\n&lt;input type=\"text\" tabindex=\"2\"&gt;\n\n&lt;div role=\"button\" aria-pressed=\"false\"&gt;Bouton&lt;/div&gt;\n</code></pre>"},{"location":"html/#quelques-balises","title":"Quelques balises","text":"<p>HEAD</p> <p>La balise <code>&lt;head&gt;</code> permet de d\u00e9finir un ensemble d'informations sur le document. Elle contient g\u00e9n\u00e9ralement :</p> <ul> <li><code>&lt;title&gt;</code> : d\u00e9finit le titre du document.</li> <li><code>&lt;meta&gt;</code> : d\u00e9finit des m\u00e9tadonn\u00e9es sur le document.</li> <li><code>&lt;link&gt;</code> : d\u00e9finit un lien vers une ressource externe.</li> <li><code>&lt;style&gt;</code> : d\u00e9finit des styles CSS.</li> </ul> <p>La balise  permet de d\u00e9finir des m\u00e9tadonn\u00e9es sur le document. Elle est compos\u00e9e d'un attribut <code>name</code> et d'un attribut <code>content</code>. Elle peut \u00eatre utilis\u00e9e pour d\u00e9finir l'encodage du document, la description du document, les mots-cl\u00e9s du document, l'auteur du document... Et son contenu peut \u00eatre utilis\u00e9 par les moteurs de recherche pour r\u00e9f\u00e9rencer le document.</p> <p>La balise  permet aussi de d\u00e9finir le viewport du document. Le viewport permet de d\u00e9finir la largeur et l'\u00e9chelle d'un document. Il est utilis\u00e9 pour rendre un document responsive. Il est compos\u00e9 d'un attribut <code>name</code> et d'un attribut <code>content</code>. L'attribut <code>name</code> doit avoir la valeur <code>viewport</code>. L'attribut <code>content</code> doit avoir la valeur <code>width=device-width, initial-scale=1.0</code>.</p> <p>Un document Responsive Web Design est un document qui s'adapte \u00e0 la taille de l'\u00e9cran de l'appareil sur lequel il est affich\u00e9 ( ordinateur, tablette, t\u00e9l\u00e9phone...). Il est compos\u00e9 de plusieurs points de rupture. Un point de rupture est une taille d'\u00e9cran \u00e0 partir de laquelle le document change de mise en page. </p> <p>Les outils de d\u00e9veloppement des navigateurs permettent de simuler un appareil mobile. Par exemple, dans Google Chrome, on peut simuler un appareil mobile en cliquant sur <code>Toggle device toolbar</code> dans le menu des outils de d\u00e9veloppement.</p> <pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre> <p>Ce site web est responsive. Vous constaterez que la mise en page change en fonction de la taille de l'\u00e9cran. Par exemple la table des mati\u00e8res est affich\u00e9e en permanence sur un \u00e9cran large. Elle est cach\u00e9e par d\u00e9faut sur un \u00e9cran plus petit. Elle peut \u00eatre affich\u00e9e en cliquant sur le bouton <code>Table des mati\u00e8res</code>.</p> <p>BODY</p> <p>La balise <code>&lt;body&gt;</code> permet de d\u00e9finir le corps du document. Elle peut contenir par exemple :</p> <ul> <li><code>&lt;h1&gt;</code> : d\u00e9finit un titre de niveau 1.</li> <li><code>&lt;p&gt;</code> : d\u00e9finit un paragraphe.</li> <li><code>&lt;a&gt;</code> : d\u00e9finit un lien hypertexte.</li> <li><code>&lt;img&gt;</code> : d\u00e9finit une image.</li> <li><code>&lt;ul&gt;</code> : d\u00e9finit une liste non ordonn\u00e9e.</li> <li><code>&lt;ol&gt;</code> : d\u00e9finit une liste ordonn\u00e9e.</li> <li><code>&lt;li&gt;</code> : d\u00e9finit un \u00e9l\u00e9ment de liste.</li> <li><code>&lt;div&gt;</code> : d\u00e9finit une division ou un conteneur g\u00e9n\u00e9rique.</li> <li><code>&lt;span&gt;</code> : d\u00e9finit une section g\u00e9n\u00e9rique.</li> <li><code>&lt;table&gt;</code> : d\u00e9finit un tableau.</li> <li>et bien d'autres</li> </ul> <p>Balises s\u00e9mantiques</p> <p>Les balises s\u00e9mantiques permettent de d\u00e9finir le r\u00f4le d'un \u00e9l\u00e9ment. Elles permettent de structurer le contenu d'une page web. Elles sont utilis\u00e9es par les moteurs de recherche pour r\u00e9f\u00e9rencer le contenu d'une page web. Elles permettent \u00e9galement d'am\u00e9liorer l'accessibilit\u00e9 d'une page web.</p> <ul> <li><code>&lt;header&gt;</code> : d\u00e9finit un en-t\u00eate.</li> <li><code>&lt;nav&gt;</code> : d\u00e9finit une barre de navigation.</li> <li><code>&lt;main&gt;</code> : d\u00e9finit le contenu principal.</li> <li><code>&lt;section&gt;</code> : d\u00e9finit une section.</li> <li><code>&lt;article&gt;</code> : d\u00e9finit un article.</li> <li><code>&lt;aside&gt;</code> : d\u00e9finit un contenu \u00e0 part.</li> <li><code>&lt;details&gt;</code> : d\u00e9finit des d\u00e9tails suppl\u00e9mentaires.</li> <li><code>&lt;summary&gt;</code> : d\u00e9finit un r\u00e9sum\u00e9.</li> <li><code>&lt;footer&gt;</code> : d\u00e9finit un pied de page.</li> </ul> <p>Balises de texte</p> <p>Les balises de texte permettent de d\u00e9finir le style d'un texte.</p> <ul> <li><code>&lt;strong&gt;</code> : d\u00e9finit un texte important.</li> <li><code>&lt;em&gt;</code> : d\u00e9finit un texte mis en emphase.</li> <li><code>&lt;mark&gt;</code> : d\u00e9finit un texte marqu\u00e9.</li> <li><code>&lt;small&gt;</code> : d\u00e9finit un texte de taille r\u00e9duite.</li> <li><code>&lt;del&gt;</code> : d\u00e9finit un texte supprim\u00e9.</li> </ul> <p>Balises de formulaire</p> <p>Les balises de formulaire permettent de cr\u00e9er des formulaires.</p> <ul> <li><code>&lt;form&gt;</code> : d\u00e9finit un formulaire.</li> <li><code>&lt;input&gt;</code> : d\u00e9finit un champ de saisie.</li> <li><code>&lt;textarea&gt;</code> : d\u00e9finit une zone de texte multiligne.</li> <li><code>&lt;button&gt;</code> : d\u00e9finit un bouton.</li> <li><code>&lt;select&gt;</code> : d\u00e9finit une liste d\u00e9roulante.</li> <li><code>&lt;option&gt;</code> : d\u00e9finit une option dans une liste d\u00e9roulante.</li> <li><code>&lt;label&gt;</code> : d\u00e9finit un label pour un champ de saisie.</li> <li><code>&lt;fieldset&gt;</code> : d\u00e9finit un groupe de champs de saisie.</li> <li><code>&lt;legend&gt;</code> : d\u00e9finit une l\u00e9gende pour un groupe de champs de saisie.</li> </ul> <p>Balises multim\u00e9dia</p> <p>Les balises multim\u00e9dia permettent d'ajouter des m\u00e9dias \u00e0 une page web.</p> <ul> <li><code>&lt;img&gt;</code> : d\u00e9finit une image.</li> <li><code>&lt;audio&gt;</code> : d\u00e9finit un fichier audio.</li> <li><code>&lt;video&gt;</code> : d\u00e9finit un fichier vid\u00e9o.</li> <li><code>&lt;source&gt;</code> : d\u00e9finit une source externe pour un fichier audio ou vid\u00e9o.</li> </ul> <p>Balises de programmation</p> <p>Les balises de programmation permettent d'ajouter du code \u00e0 une page web.</p> <ul> <li><code>&lt;script&gt;</code> : d\u00e9finit un script.</li> <li><code>&lt;style&gt;</code> : d\u00e9finit des styles CSS.</li> <li><code>&lt;link&gt;</code> : d\u00e9finit un lien vers une ressource externe.</li> </ul> <p>La balise <code>&lt;script&gt;</code> permet d'ajouter du code JavaScript \u00e0 une page web. Elle est compos\u00e9e d'un attribut <code>src</code> qui permet de d\u00e9finir l'URL du fichier JavaScript. Elle peut \u00e9galement contenir du code JavaScript directement dans la balise.</p> <pre><code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  console.log('Hello world!');\n&lt;/script&gt;\n</code></pre> <p>La balise <code>&lt;style&gt;</code> permet d'ajouter du code CSS \u00e0 une page web. Elle peut contenir du code CSS directement dans la balise.</p> <pre><code>&lt;style&gt;\n  h1 {\n    color: red;\n  }\n&lt;/style&gt;\n\n&lt;h1&gt;Titre&lt;/h1&gt;\n</code></pre> <p>La balise <code>&lt;link&gt;</code> permet de lier une ressource externe \u00e0 une page web. Elle est compos\u00e9e d'un attribut <code>rel</code> qui permet de d\u00e9finir le type de ressource. Elle est \u00e9galement compos\u00e9e d'un attribut <code>href</code> qui permet de d\u00e9finir l'URL de la ressource.</p> <p>Elle peut \u00eatre utilis\u00e9e pour lier une feuille de style CSS \u00e0 une page web.  Elle peut \u00e9galement \u00eatre utilis\u00e9e pour lier une police de caract\u00e8re \u00e0 une page web, lorsque la police de caract\u00e8re n'est pas disponible sur l'appareil de l'utilisateur. La police de caract\u00e8re sera alors t\u00e9l\u00e9charg\u00e9e et install\u00e9e sur l'appareil de l'utilisateur.</p> <p>Les polices de caract\u00e8res par d\u00e9faut sont d\u00e9finies par le navigateur. Elles peuvent \u00eatre diff\u00e9rentes d'un navigateur \u00e0 l'autre. Il existe tout de m\u00eame quelques polices de caract\u00e8res qui sont install\u00e9es sur la plupart des appareils. Par exemple les polices de caract\u00e8res <code>Arial</code>, <code>Helvetica</code>, <code>Times New Roman</code>. Il est possible de d\u00e9finir plusieurs polices de caract\u00e8res dans une r\u00e8gle CSS. La premi\u00e8re police de caract\u00e8re sera utilis\u00e9e si elle est disponible sur l'appareil de l'utilisateur. Sinon la deuxi\u00e8me police de caract\u00e8re sera utilis\u00e9e si elle est disponible sur l'appareil de l'utilisateur. Et ainsi de suite.</p> <p>Elle est g\u00e9n\u00e9ralement utilis\u00e9e dans la balise <code>&lt;head&gt;</code>.</p> <pre><code>&lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\"&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n</code></pre> <pre><code>&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n</code></pre>"},{"location":"js/","title":"Javascript","text":"<p>Le javascript est un langage de programmation qui permet de rendre les pages web dynamiques. Il permet d'ajouter des fonctionnalit\u00e9s aux pages web.</p>"},{"location":"js/#syntaxe","title":"Syntaxe","text":"<p>Le javascript est compos\u00e9 de variables, de fonctions et d'objets.</p> <pre><code>// Variable\nlet name = 'John';\n\n// Fonction\nfunction sayHello(name) {\n  console.log(`Hello ${name}`);\n}\n\n// Objet\nconst person = {\n  name: 'John',\n  age: 30,\n  sayHello: function() {\n    console.log(`Hello ${this.name}`);\n  }\n}\n</code></pre>"},{"location":"js/#variables","title":"Variables","text":"<p>Les variables permettent de stocker des valeurs. Il existe plusieurs types de variables :</p> <ul> <li>Les variables de type string</li> <li>Les variables de type number</li> <li>Les variables de type boolean</li> <li>Les variables de type array</li> <li>Les variables de type object</li> </ul>"},{"location":"js/#fonctions","title":"Fonctions","text":"<p>Les fonctions permettent d'ex\u00e9cuter des instructions. Il existe plusieurs types de fonctions :</p> <ul> <li>Les fonctions d\u00e9clar\u00e9es</li> <li>Les fonctions anonymes</li> <li>Les fonctions fl\u00e9ch\u00e9es</li> </ul> <p>Fonctions d\u00e9clar\u00e9es</p> <pre><code>function sayHello(name) {\n  console.log(`Hello ${name}`);\n}\n</code></pre> <p>Fonctions anonymes</p> <pre><code>const sayHello = function(name) {\n  console.log(`Hello ${name}`);\n}\n</code></pre> <p>Fonctions fl\u00e9ch\u00e9es</p> <pre><code>const sayHello = (name) =&gt; {\n  console.log(`Hello ${name}`);\n}\n</code></pre> <p>Les trois syntaxes ci-dessus sont \u00e9quivalentes. Elles permettent d'afficher \"Hello John\" dans la console. </p> <pre><code>sayHello('John');\n</code></pre> <p>Il est possible de retourner une valeur avec le mot cl\u00e9 <code>return</code>.</p> <pre><code>function add(a, b) {\n  return a + b;\n}\n\nconst result = add(1, 2);\nconsole.log(result); // 3\n</code></pre>"},{"location":"js/#objets","title":"Objets","text":"<p>Les objets permettent de stocker des donn\u00e9es. Il existe plusieurs types d'objets :</p> <ul> <li>Les objets litt\u00e9raux</li> <li>Les objets instanci\u00e9s</li> </ul> <p>Objets litt\u00e9raux</p> <pre><code>const person = {\n  name: 'John',\n  age: 30,\n  sayHello: function() {\n    console.log(`Hello ${this.name}`);\n  }\n}\n</code></pre> <p>Objets instanci\u00e9s</p> <pre><code>class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  sayHello() {\n    console.log(`Hello ${this.name}`);\n  }\n}\n\nconst person = new Person('John', 30);\n</code></pre>"},{"location":"js/#dom","title":"DOM","text":"<p>Le DOM (Document Object Model) est une interface de programmation qui permet de manipuler les \u00e9l\u00e9ments html. Il permet d'ajouter, de modifier et de supprimer des \u00e9l\u00e9ments html.</p>"},{"location":"js/#selectionner-un-element","title":"S\u00e9lectionner un \u00e9l\u00e9ment","text":"<p>Il existe plusieurs m\u00e9thodes pour s\u00e9lectionner un \u00e9l\u00e9ment html :</p> <ul> <li><code>document.getElementById()</code></li> <li><code>document.getElementsByClassName()</code></li> <li><code>document.getElementsByTagName()</code></li> <li><code>document.querySelector()</code></li> </ul> <p>document.getElementById()</p> <pre><code>&lt;h1 id=\"title\"&gt;Titre&lt;/h1&gt;\n</code></pre> <pre><code>const title = document.getElementById('title');\n</code></pre> <p>document.getElementsByClassName()</p> <pre><code>&lt;h1 class=\"title\"&gt;Titre&lt;/h1&gt;\n</code></pre> <pre><code>const title = document.getElementsByClassName('title');\n</code></pre> <p>document.getElementsByTagName()</p> <pre><code>&lt;h1&gt;Titre&lt;/h1&gt;\n</code></pre> <pre><code>const title = document.getElementsByTagName('h1');\n</code></pre> <p>document.querySelector()</p> <pre><code>&lt;h1 id=\"title\"&gt;Titre&lt;/h1&gt;\n</code></pre> <pre><code>const title = document.querySelector('#title');\n</code></pre>"},{"location":"js/#modifier-un-element","title":"Modifier un \u00e9l\u00e9ment","text":"<p>Il existe plusieurs propri\u00e9t\u00e9s pour modifier un \u00e9l\u00e9ment html :</p> <ul> <li><code>innerHTML</code></li> <li><code>innerText</code></li> <li><code>textContent</code></li> <li><code>style</code></li> </ul> <p>innerHTML</p> <pre><code>&lt;h1 id=\"title\"&gt;Titre&lt;/h1&gt;\n</code></pre> <pre><code>const title = document.getElementById('title');\ntitle.innerHTML = '&lt;span&gt;Nouveau titre&lt;/span&gt;';\ntitle.innerHTML += '&lt;span&gt;Titre 2&lt;/span&gt;';\n</code></pre> <p>innerText</p> <pre><code>&lt;h1 id=\"title\"&gt;Titre&lt;/h1&gt;\n</code></pre> <pre><code>const title = document.getElementById('title');\ntitle.innerText = 'Nouveau titre';\n</code></pre> <p>textContent</p> <pre><code>&lt;h1 id=\"title\"&gt;Titre&lt;/h1&gt;\n</code></pre> <pre><code>const title = document.getElementById('title');\ntitle.textContent = 'Nouveau titre';\n</code></pre> <p>La diff\u00e9rence entre <code>innerText</code> et <code>textContent</code> est que <code>innerText</code> ne prend pas en compte les styles css.</p> <p>style</p> <p>On acc\u00e8de \u00e0 l'ensemble des propri\u00e9t\u00e9s css avec la propri\u00e9t\u00e9 <code>style</code>. On peut modifier les propri\u00e9t\u00e9s css avec cette propri\u00e9t\u00e9.</p> <pre><code>&lt;h1 id=\"title\"&gt;Titre&lt;/h1&gt;\n</code></pre> <pre><code>const title = document.getElementById('title');\ntitle.style.color = 'red';\n</code></pre>"},{"location":"js/#ajouter-un-element","title":"Ajouter un \u00e9l\u00e9ment","text":"<p>Il existe plusieurs m\u00e9thodes pour ajouter un \u00e9l\u00e9ment html :</p> <ul> <li><code>document.createElement()</code></li> <li><code>document.createTextNode()</code></li> <li><code>document.appendChild()</code></li> <li><code>document.insertBefore()</code></li> </ul> <p>Par exemple, si on souhaite ajouter un titre dans une div :</p> <pre><code>&lt;div id=\"container\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>const container = document.getElementById('container');\nconst title = document.createElement('h1');\ntitle.innerText = 'Titre';\ncontainer.appendChild(title);\n</code></pre>"},{"location":"js/#supprimer-un-element","title":"Supprimer un \u00e9l\u00e9ment","text":"<p>Il existe plusieurs m\u00e9thodes pour supprimer un \u00e9l\u00e9ment html :</p> <ul> <li><code>document.removeChild()</code></li> <li><code>document.remove()</code></li> </ul> <p>Par exemple, si on souhaite supprimer un titre dans une div :</p> <pre><code>&lt;div id=\"container\"&gt;\n  &lt;h1 id=\"title\"&gt;Titre&lt;/h1&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>const container = document.getElementById('container');\nconst title = document.getElementById('title');\ncontainer.removeChild(title);\n</code></pre>"},{"location":"js/#evenements","title":"Ev\u00e9nements","text":"<p>Les \u00e9v\u00e9nements permettent d'ex\u00e9cuter une fonction lorsqu'une action est effectu\u00e9e. Il existe plusieurs types d'\u00e9v\u00e9nements :</p> <ul> <li>Les \u00e9v\u00e9nements de souris</li> <li>Les \u00e9v\u00e9nements de clavier</li> <li>Les \u00e9v\u00e9nements de formulaire</li> <li>Les \u00e9v\u00e9nements de document</li> <li>Les \u00e9v\u00e9nements de fen\u00eatre</li> </ul>"},{"location":"js/#les-evenements-de-souris","title":"Les \u00e9v\u00e9nements de souris","text":"<ul> <li><code>click</code></li> <li><code>dblclick</code></li> <li><code>mousedown</code></li> <li><code>mouseup</code></li> <li><code>mouseover</code></li> <li><code>mouseout</code></li> <li><code>mousemove</code></li> </ul>"},{"location":"js/#les-evenements-de-clavier","title":"Les \u00e9v\u00e9nements de clavier","text":"<ul> <li><code>keydown</code></li> <li><code>keyup</code></li> <li><code>keypress</code></li> </ul>"},{"location":"js/#les-evenements-de-formulaire","title":"Les \u00e9v\u00e9nements de formulaire","text":"<ul> <li><code>submit</code></li> <li><code>change</code></li> <li><code>focus</code></li> <li><code>blur</code></li> </ul>"},{"location":"js/#les-evenements-de-document","title":"Les \u00e9v\u00e9nements de document","text":"<ul> <li><code>load</code></li> <li><code>scroll</code></li> <li><code>resize</code></li> <li><code>unload</code></li> </ul>"},{"location":"js/#les-evenements-de-fenetre","title":"Les \u00e9v\u00e9nements de fen\u00eatre","text":"<ul> <li><code>load</code></li> <li><code>scroll</code></li> <li><code>resize</code></li> <li><code>unload</code></li> </ul>"},{"location":"js/#ajouter-un-evenement","title":"Ajouter un \u00e9v\u00e9nement","text":"<p>La fonction element.addEventListener() permet d'ajouter un \u00e9v\u00e9nement \u00e0 un \u00e9l\u00e9ment html.</p> <pre><code>&lt;button id=\"button\"&gt;Cliquez ici&lt;/button&gt;\n</code></pre> <pre><code>const button = document.getElementById('button');\nbutton.addEventListener('click', function() {\n  console.log('Cliquez');\n});\n</code></pre>"},{"location":"js/#quelques-fonctions-natives-utiles","title":"Quelques fonctions natives utiles","text":""},{"location":"js/#les-fonctions-de-chaine-de-caracteres","title":"Les fonctions de cha\u00eene de caract\u00e8res","text":"<ul> <li><code>charAt()</code>: retourne le caract\u00e8re \u00e0 l'index sp\u00e9cifi\u00e9</li> <li><code>concat()</code>: concat\u00e8ne deux cha\u00eenes de caract\u00e8res</li> <li><code>includes()</code>: v\u00e9rifie si une cha\u00eene de caract\u00e8res contient une autre cha\u00eene de caract\u00e8res</li> <li><code>indexOf()</code>: retourne l'index de la premi\u00e8re occurence d'une cha\u00eene de caract\u00e8res</li> </ul> <p>Exemple</p> <p>Une fonction qui retourne le caract\u00e8re \u00e0 l'index sp\u00e9cifi\u00e9 :</p> <pre><code>const name = 'John';\n\nconst character = name.charAt(0);\n\nconsole.log(character); // Output: J\n</code></pre> <p>Une fonction qui concat\u00e8ne deux cha\u00eenes de caract\u00e8res :</p> <pre><code>const firstName = 'John';\nconst lastName = 'Doe';\n\nconst fullName = firstName.concat(lastName);\n\nconsole.log(fullName); // Output: JohnDoe\n</code></pre>"},{"location":"js/#les-fonctions-de-date","title":"Les fonctions de date","text":"<ul> <li><code>getDate()</code>: retourne le jour du mois</li> <li><code>getDay()</code>: retourne le jour de la semaine</li> </ul>"},{"location":"js/#les-fonctions-mathematiques","title":"Les fonctions math\u00e9matiques","text":"<ul> <li><code>ceil()</code>: arrondit un nombre \u00e0 l'entier sup\u00e9rieur</li> <li><code>floor()</code>: arrondit un nombre \u00e0 l'entier inf\u00e9rieur</li> <li><code>round()</code>: arrondit un nombre \u00e0 l'entier le plus proche</li> <li><code>random()</code>: retourne un nombre al\u00e9atoire entre 0 et 1</li> </ul> <p>Exemple</p> <p>Une fonction qui retourne un nombre al\u00e9atoire entre 0 et 10 :</p> <pre><code>const randomNumber = Math.random() * 10;\n\nconsole.log(randomNumber); // Output: 5.123456789\n</code></pre> <p>Une fonction qui retourne un nombre al\u00e9atoire entre 0 et 10 arrondi \u00e0 l'entier sup\u00e9rieur :</p> <pre><code>const randomNumber = Math.ceil(Math.random() * 10);\n\nconsole.log(randomNumber); // Output: 6\n</code></pre>"},{"location":"js/#les-fonctions-de-tableau","title":"Les fonctions de tableau","text":"<ul> <li><code>concat()</code>: concat\u00e8ne deux tableaux</li> <li><code>filter()</code>: filtre les \u00e9l\u00e9ments d'un tableau</li> <li><code>find()</code>: retourne le premier \u00e9l\u00e9ment d'un tableau qui satisfait une condition</li> <li><code>forEach()</code>: ex\u00e9cute une fonction sur chaque \u00e9l\u00e9ment d'un tableau</li> <li><code>includes()</code>: v\u00e9rifie si un tableau contient une valeur</li> </ul> <p>Exemple</p> <p>Une fonction qui retourne les nombres pairs d'un tableau :</p> <pre><code>const numbers = [1, 2, 3, 4, 5];\n\nconst evenNumbers = numbers.filter(function(number) {\n  return number % 2 === 0;\n});\n\nconsole.log(evenNumbers); // Output: [2, 4]\n</code></pre> <p>Une fonction qui retourne le premier nombre pair d'un tableau :</p> <pre><code>const numbers = [1, 2, 3, 4, 5];\n\nconst evenNumber = numbers.find(function(number) {\n  return number % 2 === 0;\n});\n\nconsole.log(evenNumber); // Output: 2\n</code></pre> <p>Une fonction qui affiche chaque \u00e9l\u00e9ment d'un tableau :</p> <pre><code>const numbers = [1, 2, 3, 4, 5];\n\nnumbers.forEach(function(number) {\n  console.log(number);\n});\n</code></pre> <p>Une fonction qui v\u00e9rifie si un tableau contient une valeur :</p> <pre><code>const numbers = [1, 2, 3, 4, 5];\n\nconst hasNumber = numbers.includes(3);\n\nconsole.log(hasNumber); // Output: true\n</code></pre>"},{"location":"js/#try-catch","title":"Try / Catch","text":"<p>Le try / catch permet de g\u00e9rer les erreurs. Il permet d'ex\u00e9cuter une instruction et de g\u00e9rer les erreurs qui peuvent survenir.</p> <pre><code>function callFunction(simulateError = false) {\n  if (simulateError){\n    throw new Error('Erreur');\n  }  \n}\n\ntry {\n  // Traitement pouvant g\u00e9n\u00e9r\u00e9 une erreur\n  console.log('Hello');\n  callFunction();\n  console.log('World');\n  callFunction(true);\n  console.log('!')\n} catch(error) {\n  console.log(error);\n}\n</code></pre>"},{"location":"js/#promesses","title":"Promesses","text":"<p>Les promesses permettent d'ex\u00e9cuter des instructions de mani\u00e8re asynchrone. Elles permettent d'attendre le r\u00e9sultat d'une promesse avant d'ex\u00e9cuter une instruction.</p> <p>Dans l'exemple ci-dessous, la fonction getData() permet de r\u00e9cup\u00e9rer des donn\u00e9es \u00e0 l'aide de l'API fetch. L'API fetch permet de faire des requ\u00eates HTTP. La fonction getData() retourne une promesse. </p> <pre><code>function getData() {\n  return fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(function(response) {\n      return response.json();\n    })\n    .then(function(data) {\n      return data;\n    });\n}\n</code></pre>"},{"location":"js/#async-await","title":"Async / Await","text":"<p>L'async / await permet d'ex\u00e9cuter des instructions de mani\u00e8re asynchrone. Il permet d'attendre le r\u00e9sultat d'une promesse avant d'ex\u00e9cuter une instruction.</p> <p>Dans l'exemple ci-dessous, la fonction getData() permet de r\u00e9cup\u00e9rer des donn\u00e9es \u00e0 l'aide de l'API fetch. L'API fetch permet de faire des requ\u00eates HTTP. La fonction getData() est une fonction asynchrone gr\u00e2ce \u00e0 l'ajout du mot cl\u00e9  <code>async</code>. </p> <pre><code>async function getData() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n  const data = await response.json();\n  console.log(data);\n}\n\ngetData();\n</code></pre> <p>Il est possible de faire la m\u00eame chose avec la syntaxe suivante :</p> <pre><code>async function getData() {\n  fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(function(response) {\n      return response.json();\n    })\n    .then(function(data) {\n      console.log(data);\n    });\n}\n\ngetData();\n</code></pre> <p>Exemple</p> <p>L'exemple ci-dessous illustre l'utilisation de l'async / await. </p> <p>En regardant la console, on peut voir que les donn\u00e9es sont r\u00e9cup\u00e9r\u00e9es de mani\u00e8re asynchrone. L'ordre d'ex\u00e9cution des instructions n'est pas garanti. Il est possible que les donn\u00e9es de l'id 3 soient r\u00e9cup\u00e9r\u00e9es avant les donn\u00e9es de l'id 2 par exemple. </p> <p>La fonction globalAsync() permet d'attendre le r\u00e9sultat de chaque promesse avant d'ex\u00e9cuter la suivante et de garantir l'ordre d'ex\u00e9cution des instructions.</p> <p>En fonction des cas d'usage on utilisera ou non l'async / await.</p> <pre><code>    async function getData(id) {\n        fetch('https://jsonplaceholder.typicode.com/todos/' + id)\n            .then(function (response) {\n                return response.json();\n            })\n            .then(function (data) {\n                console.log(\"The data for \" + id);\n                console.debug(data);\n            });\n    }\n\n    async function getDataAsync(id) {\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos/' + id)\n        const data = await response.json();\n        console.log(\"The data from async for \" + id);\n        console.debug(data);\n    }\n\n    async function globalAsync() {\n        console.log('globalAsync');\n        await getDataAsync(1);\n        await getDataAsync(2);\n        await getDataAsync(3);\n    }\n\n    getData(1);\n    getData(2);\n    getData(3);\n\n    getDataAsync(1);\n    getDataAsync(2);\n    getDataAsync(3);\n\n    globalAsync();\n</code></pre>"},{"location":"react/","title":"Introduction \u00e0 React","text":""},{"location":"react/#introduction","title":"Introduction","text":"<p>React est une librairie JavaScript d\u00e9velopp\u00e9e par Facebook et Instagram. Elle permet de cr\u00e9er des interfaces utilisateurs interactives et dynamiques. Elle est utilis\u00e9e par de nombreux sites web et applications, comme Facebook, Instagram, Netflix, Airbnb, Uber, etc.</p> <p>React est une librairie JavaScript, et non un framework. Cela signifie qu'elle ne fournit pas de structure ou de m\u00e9thodologie pour organiser votre code. Elle ne fournit pas non plus de fonctionnalit\u00e9s pour g\u00e9rer les requ\u00eates HTTP, les routes, etc. Elle se concentre uniquement sur la cr\u00e9ation d'interfaces utilisateurs.</p> <p>React est une librairie open source, et est donc gratuite. Elle est distribu\u00e9e sous licence MIT.</p>"},{"location":"react/#pourquoi-utiliser-react","title":"Pourquoi utiliser React ?","text":"<p>React est une librairie tr\u00e8s populaire, et est utilis\u00e9e par de nombreux sites web et applications. Elle est tr\u00e8s appr\u00e9ci\u00e9e par les d\u00e9veloppeurs, et est donc un atout pour votre CV.</p> <p>React est \u00e9galement tr\u00e8s performant. Il est con\u00e7u pour \u00eatre rapide, et pour g\u00e9rer efficacement les mises \u00e0 jour de l'interface utilisateur. Il est \u00e9galement tr\u00e8s flexible, et peut \u00eatre utilis\u00e9 pour cr\u00e9er des interfaces utilisateurs simples ou complexes.</p> <p>React est \u00e9galement tr\u00e8s populaire aupr\u00e8s des d\u00e9veloppeurs, et dispose donc d'une grande communaut\u00e9. Il existe de nombreux tutoriels, articles, vid\u00e9os, etc. pour vous aider \u00e0 apprendre React.</p>"},{"location":"react/#comment-fonctionne-react","title":"Comment fonctionne React ?","text":"<p>React utilise un DOM virtuel pour g\u00e9rer les mises \u00e0 jour de l'interface utilisateur. Le DOM virtuel est une repr\u00e9sentation du DOM dans la m\u00e9moire. Il est plus rapide que le DOM r\u00e9el, car il n'est pas directement li\u00e9 au navigateur. Lorsqu'une mise \u00e0 jour de l'interface utilisateur est effectu\u00e9e, React compare le DOM virtuel et le DOM r\u00e9el, et met \u00e0 jour le DOM r\u00e9el uniquement lorsque cela est n\u00e9cessaire.</p> <p>React utilise \u00e9galement un syst\u00e8me de composants. Un composant est une partie de l'interface utilisateur qui peut \u00eatre r\u00e9utilis\u00e9e. Il peut s'agir d'un bouton, d'un champ de saisie, d'une liste, etc. Un composant peut \u00eatre compos\u00e9 d'autres composants. Par exemple, un composant de liste peut \u00eatre compos\u00e9 de composants de ligne.</p>"},{"location":"react/#comment-apprendre-react","title":"Comment apprendre React ?","text":"<p>React est une librairie JavaScript, et il est donc n\u00e9cessaire d'avoir des connaissances de base en JavaScript pour l'utiliser. Si vous ne connaissez pas JavaScript, vous pouvez apprendre les bases de JavaScript sur Codecademy.</p> <p>Une fois que vous avez des connaissances de base en JavaScript, vous pouvez apprendre React sur Codecademy. Vous pouvez \u00e9galement consulter la documentation officielle de React.</p>"},{"location":"react/#jsx","title":"JSX","text":"<p>JSX est une extension de syntaxe pour JavaScript. Il permet d'\u00e9crire du code HTML dans des fichiers JavaScript. Il est utilis\u00e9 par React pour d\u00e9crire l'interface utilisateur.</p> <p>Voici un exemple de JSX :</p> <pre><code>const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;\n</code></pre> <p>JSX est facultatif, et vous pouvez utiliser JavaScript pur pour d\u00e9crire l'interface utilisateur. Cependant, JSX est tr\u00e8s populaire, et est donc utilis\u00e9 par la plupart des d\u00e9veloppeurs React.</p>"},{"location":"react/#composants","title":"Composants","text":"<p>Un composant est une partie de l'interface utilisateur qui peut \u00eatre r\u00e9utilis\u00e9e. Il peut s'agir d'un bouton, d'un champ de saisie, d'une liste, etc. Un composant peut \u00eatre compos\u00e9 d'autres composants. Par exemple, un composant de liste peut \u00eatre compos\u00e9 de composants de ligne.</p> <p>Voici un exemple de composant :</p> <pre><code>function Button(props) {\n  return &lt;button&gt;{props.label}&lt;/button&gt;;\n}\n</code></pre> <p>Ce composant est une fonction qui renvoie un bouton. Il prend un objet <code>props</code> en param\u00e8tre, qui contient les propri\u00e9t\u00e9s du composant. Dans cet exemple, le composant prend une propri\u00e9t\u00e9 <code>label</code>, qui est utilis\u00e9e comme \u00e9tiquette du bouton.</p> <p>Voici un exemple d'utilisation de ce composant :</p> <pre><code>&lt;Button label=\"Click me\" /&gt;\n</code></pre> <p>Ce composant est utilis\u00e9 comme une balise HTML. Il prend une propri\u00e9t\u00e9 <code>label</code>, qui est utilis\u00e9e comme \u00e9tiquette du bouton.</p> <p>Les composants peuvent \u00e9galement \u00eatre d\u00e9finis comme des classes. Voici un exemple de composant d\u00e9fini comme une classe :</p> <pre><code>class Button extends React.Component {\n  render() {\n    return &lt;button&gt;{this.props.label}&lt;/button&gt;;\n  }\n}\n</code></pre> <p>Ce composant est une classe qui \u00e9tend la classe <code>React.Component</code>. Il d\u00e9finit une m\u00e9thode <code>render()</code> qui renvoie un bouton. Il utilise la propri\u00e9t\u00e9 <code>label</code> de la classe pour d\u00e9finir l'\u00e9tiquette du bouton.</p> <p>Voici un exemple d'utilisation de ce composant :</p> <pre><code>&lt;Button label=\"Click me\" /&gt;\n</code></pre> <p>Ce composant est utilis\u00e9 comme une balise HTML. Il prend une propri\u00e9t\u00e9 <code>label</code>, qui est utilis\u00e9e comme \u00e9tiquette du bouton. Un composant peut \u00eatre compos\u00e9 d'autres composants. Voici un exemple de composant compos\u00e9 d'autres composants :</p> <pre><code>function List(props) {\n  return (\n    &lt;ul&gt;\n      &lt;ListItem label=\"Item 1\" /&gt;\n      &lt;ListItem label=\"Item 2\" /&gt;\n      &lt;ListItem label=\"Item 3\" /&gt;\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Ce composant est une fonction qui renvoie une liste. Il utilise le composant <code>ListItem</code> pour d\u00e9finir les \u00e9l\u00e9ments de la liste.</p> <p>Voici un exemple d'utilisation de ce composant :</p> <pre><code>&lt;List /&gt;\n</code></pre> <p>Ce composant est utilis\u00e9 comme une balise HTML. Il ne prend pas de propri\u00e9t\u00e9. Il utilise le composant <code>ListItem</code> pour d\u00e9finir les \u00e9l\u00e9ments de la liste. Les composants React commencent par une lettre majuscule, ce qui permet de les distinguer des balises HTML.</p> <p>Classes ou fonctions ?</p> <p>Les composants peuvent \u00eatre d\u00e9finis comme des classes ou des fonctions. Les classes sont plus flexibles, et peuvent \u00eatre utilis\u00e9es pour cr\u00e9er des composants plus complexes. Les fonctions sont plus simples, et peuvent \u00eatre utilis\u00e9es pour cr\u00e9er des composants plus simples.</p>"},{"location":"react/#etat","title":"\u00c9tat","text":"<p>L'\u00e9tat est un objet qui contient les donn\u00e9es d'un composant. Il peut \u00eatre utilis\u00e9 pour stocker des donn\u00e9es qui changent au fil du temps.</p> <p>Voici un exemple d'\u00e9tat :</p> <pre><code>class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  render() {\n    return &lt;p&gt;{this.state.count}&lt;/p&gt;;\n  }\n}\n</code></pre> <p>Cet \u00e9tat est un objet qui contient une propri\u00e9t\u00e9 <code>count</code>. Cette propri\u00e9t\u00e9 est utilis\u00e9e pour stocker le nombre d'\u00e9l\u00e9ments de la liste. Elle est initialis\u00e9e \u00e0 <code>0</code> dans le constructeur du composant.</p> <p>Voici un exemple d'utilisation de cet \u00e9tat :</p> <pre><code>&lt;Counter /&gt;\n</code></pre> <p>Cet \u00e9tat est utilis\u00e9 comme une balise HTML. Il ne prend pas de propri\u00e9t\u00e9. Il utilise la propri\u00e9t\u00e9 <code>count</code> de l'\u00e9tat pour afficher le nombre d'\u00e9l\u00e9ments de la liste.</p> <p>L'\u00e9tat peut \u00eatre mis \u00e0 jour \u00e0 l'aide de la m\u00e9thode <code>setState()</code>. Voici un exemple de mise \u00e0 jour de l'\u00e9tat :</p> <pre><code>class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;{this.state.count}&lt;/p&gt;\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;+&lt;/button&gt;\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count - 1 })}&gt;-&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>"},{"location":"react/#cycle-de-vie","title":"Cycle de vie","text":"<p>Le cycle de vie est une s\u00e9rie d'\u00e9tapes qui se produisent lorsqu'un composant est cr\u00e9\u00e9, mis \u00e0 jour ou supprim\u00e9. Il peut \u00eatre utilis\u00e9 pour ex\u00e9cuter du code \u00e0 des moments pr\u00e9cis du cycle de vie d'un composant.</p> <p>Voici un exemple de cycle de vie :</p> <pre><code>class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  componentDidMount() {\n    console.log('Component did mount');\n  }\n\n  componentDidUpdate() {\n    console.log('Component did update');\n  }\n\n  componentWillUnmount() {\n    console.log('Component will unmount');\n  }\n\n  render() {\n    return &lt;p&gt;{this.state.count}&lt;/p&gt;;\n  }\n}\n</code></pre>"},{"location":"react/#affichage-conditionnel","title":"Affichage conditionnel","text":"<p>L'affichage conditionnel est une technique qui permet d'afficher un \u00e9l\u00e9ment uniquement si une condition est remplie. Il peut \u00eatre utilis\u00e9 pour afficher un \u00e9l\u00e9ment uniquement si un \u00e9tat est rempli.</p> <p>Voici un exemple d'affichage conditionnel :</p> <pre><code>class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        {this.state.count &gt; 0 &amp;&amp; &lt;p&gt;{this.state.count}&lt;/p&gt;}\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;+&lt;/button&gt;\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count - 1 })}&gt;-&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> <p>Dans cet exemple, le composant <code>Counter</code> affiche un \u00e9l\u00e9ment <code>&lt;p&gt;</code> uniquement si l'\u00e9tat <code>count</code> est sup\u00e9rieur \u00e0 <code>0</code>. La balise <code>&lt;p&gt;</code> est affich\u00e9e uniquement si la condition <code>this.state.count &gt; 0</code> est remplie.</p> <p>Il est aussi possible d'utiliser une condition pour afficher un composant ou un autre. Voici un exemple d'affichage conditionnel :</p> <pre><code>function IsLogged(props) {\n  if (props.isLogged) {\n    return &lt;p&gt;Welcome back!&lt;/p&gt;;\n  } else {\n    return &lt;p&gt;Please log in.&lt;/p&gt;;\n  }\n}\n</code></pre>"},{"location":"react/#listes","title":"Listes","text":"<p>Une liste est un ensemble d'\u00e9l\u00e9ments. Elle peut \u00eatre utilis\u00e9e pour afficher une liste d'\u00e9l\u00e9ments.</p> <p>Voici un exemple de liste :</p> <pre><code>class List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: ['Item 1', 'Item 2', 'Item 3'] };\n  }\n\n  render() {\n    return (\n      &lt;ul&gt;\n        {this.state.items.map(item =&gt; &lt;li&gt;{item}&lt;/li&gt;)}\n      &lt;/ul&gt;\n    );\n  }\n}\n</code></pre> <p>Dans cet exemple, le composant <code>List</code> affiche une liste d'\u00e9l\u00e9ments. La liste est affich\u00e9e \u00e0 l'aide de la m\u00e9thode <code>map()</code>. La m\u00e9thode <code>map()</code> prend une fonction en param\u00e8tre, qui est appel\u00e9e pour chaque \u00e9l\u00e9ment de la liste. La fonction prend un \u00e9l\u00e9ment en param\u00e8tre, et renvoie un \u00e9l\u00e9ment de la liste.</p> <p>La fonction map est une fonction JavaScript standard, et peut \u00eatre utilis\u00e9e pour afficher une liste d'\u00e9l\u00e9ments.</p>"}]}